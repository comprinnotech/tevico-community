Provider: aws
CheckID: eks_cluster_kms_cmk_encryption_in_secrets_enabled
CheckTitle: Ensure EKS cluster secrets are protected with AWS CMK encryption
CheckType: [Infrastructure Protection]
ServiceName: eks
SubServiceName: "cluster"
ResourceIdTemplate: arn:aws:eks:${region}:${account}:cluster/${clustername}
Severity: high
ResourceType: AwsEksCluster
Description: |
  This check ensures that Amazon EKS clusters are configured to encrypt Kubernetes secrets using AWS Key Management Service (KMS) Customer Master Keys (CMKs). 
  Kubernetes secrets store sensitive information like passwords, OAuth tokens, and SSH keys. By default, these secrets are only base64 encoded. 
  Using KMS encryption adds an additional layer of security by encrypting secrets with cryptographic keys that you manage.
Risk: |
  Without KMS encryption:
  - Kubernetes secrets are only base64 encoded, not encrypted
  - Unauthorized users who gain access to etcd can read sensitive information
  - No audit trail exists for secret access
  - No centralized key management and rotation
  - Compliance requirements for data encryption may not be met
RelatedUrl: https://docs.aws.amazon.com/eks/latest/userguide/enable-kms.html
Remediation:
  Code:
    CLI: |
      aws eks associate-encryption-config \
        --cluster-name my-cluster \
        --encryption-config '[{"resources":["secrets"],"provider":{"keyArn":"arn:aws:kms:region:account:key/key-id"}}]'
    NativeIaC: |
      eksctl create cluster \
        --name my-cluster \
        --region region-code \
        --encryption-config '[{"resources":["secrets"],"provider":{"keyArn":"arn:aws:kms:region:account:key/key-id"}}]'
    Terraform: |
      resource "aws_eks_cluster" "example" {
        name     = "example"
        role_arn = aws_iam_role.example.arn

        encryption_config {
          provider {
            key_arn = aws_kms_key.example.arn
          }
          resources = ["secrets"]
        }
      }
  Recommendation:
    Text: |
      To enable KMS encryption for EKS secrets:
      1. Create a symmetric KMS key in the same region as your cluster
      2. Ensure the key policy allows EKS service to use the key
      3. Associate the KMS key with your cluster using the key ARN
      4. For existing clusters, use the associate-encryption-config command
      5. Verify encryption is enabled using describe-cluster command
      
      Note: Once enabled, encryption cannot be disabled, and all existing secrets will be encrypted with the new key.
    Url: https://docs.aws.amazon.com/eks/latest/userguide/enable-kms.html
Categories: [Infrastructure Protection, Data Protection, Compliance]
DependsOn: []
RelatedTo: 
  - eks_cluster_secrets_encrypted
  - kms_cmk_rotation_enabled
Notes: |
  Compliance Impact:
  - Helps meet encryption requirements for PCI DSS, HIPAA, and other standards
  - Provides audit trails through AWS CloudTrail
  - Enables centralized key management and automatic key rotation